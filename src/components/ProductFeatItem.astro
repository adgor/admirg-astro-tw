---
const projectDetails = [
  {
    title: "Design as a System",
    body: "Keep track of everyone's salaries and whether or not they've been paid. Direct deposit not supported.",
    id: "design",
    ariaSelected: true,
  },
  {
    title: "Thoughtful Development",
    body: "Responsive",
    id: "dev",
    ariaSelected: false,
  },
  {
    title: "Performance is King",
    body: "UX/UI Design",
    id: "speed",
    ariaSelected: false,
  },
  {
    title: "Final Results",
    body: "Astro",
    id: "final",
    ariaSelected: false,
  },
];

export interface Props {
  secStyle?: string;
  activeTextColor: any;
}

const { secStyle = "pt-20" } = Astro.props as Props;
---

<section
  class={` relative overflow-hidden bg-blue-600 pb-28 sm:py-32 ${secStyle}`}
  id="features"
  aria-label="our work"
>
  <!-- bg blured colorss
        /> -->
  <div id="tabs-id" class="relative px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
    <div class="max-w-2xl md:mx-auto md:text-center xl:max-w-none">
      <h2
        class="text-3xl tracking-tight text-white capitalize font-display sm:text-4xl md:text-5xl"
      >
        our work
      </h2>
    </div>
    <div
      class="grid items-center grid-cols-1 pt-10 mt-16 gap-y-2 sm:gap-y-6 md:mt-20 lg:grid-cols-12 lg:pt-0"
    >
      <div
        class="flex pb-4 tabs -mx-4 overflow-x-auto sm:mx-0 sm:overflow-visible sm:pb-0 lg:col-span-5"
      >
        <ul
          class="relative z-10 flex px-4 gap-x-4 whitespace-nowrap sm:mx-auto sm:px-0 lg:mx-0 lg:block lg:gap-x-0 lg:gap-y-1 lg:whitespace-normal"
          role="tablist"
          aria-orientation="vertical"
        >
          {
            projectDetails.map(({ title, body, id, ariaSelected }) => (
              <li class="group relative rounded-full py-1 px-4 lg:rounded-r-none lg:rounded-l-xl lg:p-6 hover:bg-white/10 lg:hover:bg-white/5">
                <a
                  class="font-display text-lg [&:not(:focus-visible)]:focus:outline-none text-blue-100 hover:text-white lg:text-white"
                  role="tab"
                  aria-selected={ariaSelected}
                  id={id}
                  type="button"
                >
                  <span class="absolute inset-0 rounded-full lg:rounded-r-none lg:rounded-l-xl" />
                  {title}
                </a>

                <p class="mt-2 hidden text-sm lg:block text-blue-100 group-hover:text-white">
                  {body}
                </p>
              </li>
            ))
          }
        </ul>
        <div class="relative flex w-full min-w-0 flex-col break-words">
          <div class="flex-auto">
            <div class="tab-content tab-space text-base text-matisse-600">
              {
                projectDetails.map(({ id }) => (
                  <div
                    role="tabpanel"
                    id={id}
                    aria-labelledby={id}
                    class=" text-white"
                  >
                    {id}
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{}}>
  const tabs = document.querySelector(".tabs");
  const tabButtons = tabs.querySelectorAll('[role="tab"]');
  const tabPanels = tabs.querySelectorAll('[role="tabpanel"]');

  function handleTabClick(event) {
    // hide all tabpannels
    tabPanels.forEach((panel) => {
      panel.hidden = true;
    });

    // mark all tabs as unselected
    tabButtons.forEach((tab) => {
      //   tab.ariaSelectd = false;
      tab.setAttribute("aria-selected", false);
    });
    // mark clicked tab as selected
    event.currentTarget.setAttribute("aria-selected", true);
    // add/remove class to clicked tab
    let element = event.target;
    while (element.nodeName !== "A") {
      element = element.parentNode;
    }
    ulElement = element.parentNode.parentNode;
    aElements = ulElement.querySelectorAll("li ");
    aElements.forEach((e) => {
      e.classList.remove(
        "bg-white",
        "lg:bg-white/10",
        "lg:ring-1",
        "lg:ring-inset",
        "lg:ring-white/10"
      );
    });
    event.currentTarget.parentNode.classList.add(
      "bg-white",
      "lg:bg-white/10",
      "lg:ring-1",
      "lg:ring-inset",
      "lg:ring-white/10"
    );
    event.currentTarget.parentNode.classList.remove(
      "hover:bg-white/10",
      "lg:hover:bg-white/5"
    );
  }
  tabButtons.forEach((button) =>
    button.addEventListener("click", handleTabClick)
  );
</script>
